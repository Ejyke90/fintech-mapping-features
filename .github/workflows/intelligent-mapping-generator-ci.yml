name: Intelligent Mapping Generator CI

on:
  push:
    branches: [ main, develop, intelligentMappingPoC ]
    paths:
      - 'intelligent-mapping-generator/**'
      - 'schemas/**'
      - '.github/workflows/intelligent-mapping-generator-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'intelligent-mapping-generator/**'
      - 'schemas/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: Build & Test Intelligent Mapping Generator

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build intelligent-mapping-generator
      run: ./gradlew :intelligent-mapping-generator:clean :intelligent-mapping-generator:build -x test
      env:
        GRADLE_OPTS: "-Dorg.gradle.daemon=false"

    - name: Run tests
      run: ./gradlew :intelligent-mapping-generator:test
      continue-on-error: true
      env:
        GRADLE_OPTS: "-Dorg.gradle.daemon=false"

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: intelligent-mapping-generator-jar
        path: intelligent-mapping-generator/build/libs/*.jar
        retention-days: 7

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: intelligent-mapping-generator-test-results
        path: |
          intelligent-mapping-generator/build/test-results/test/*.xml
          intelligent-mapping-generator/build/reports/tests/test/
        retention-days: 7

  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security Scan
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run checkstyle (if configured)
      run: ./gradlew :intelligent-mapping-generator:checkstyleMain || true
      continue-on-error: true

    - name: Cache SonarCloud packages
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: SonarCloud Scan
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ -n "$SONAR_TOKEN" ]; then
          ./gradlew :intelligent-mapping-generator:sonar \
            -Dsonar.projectKey=fintech-mapping-features-intelligent-mapping-generator \
            -Dsonar.organization=ejyke90 \
            -Dsonar.host.url=https://sonarcloud.io || true
        else
          echo "SONAR_TOKEN not set, skipping SonarCloud scan"
        fi
      continue-on-error: true

  validation-test:
    runs-on: ubuntu-latest
    name: XML Schema Validation Tests
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build the component
      run: ./gradlew :intelligent-mapping-generator:build -x test

    - name: Run XML validation tests
      run: |
        if [ -f intelligent-mapping-generator/test-validation.sh ]; then
          cd intelligent-mapping-generator
          chmod +x test-validation.sh
          ./test-validation.sh || true
        else
          echo "test-validation.sh not found, skipping validation tests"
        fi
      continue-on-error: true

    - name: Validate sample ISO messages
      run: |
        echo "Validating sample ISO 20022 messages..."
        if [ -d schemas/iso20022 ]; then
          echo "Found ISO 20022 schemas and samples"
          ls -la schemas/iso20022/
        fi

  docker-build:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/intelligentMappingPoC')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ejyke90/intelligent-mapping-generator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          type=raw,value=poc,enable=${{ github.ref == 'refs/heads/intelligentMappingPoC' }}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          MODULE_NAME=intelligent-mapping-generator

    - name: Push Docker image (main branch only)
      if: github.ref == 'refs/heads/main' && secrets.DOCKER_USERNAME != ''
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          MODULE_NAME=intelligent-mapping-generator

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    services:
      kafka:
        image: confluentinc/cp-kafka:7.5.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
        options: >-
          --health-cmd "kafka-broker-api-versions --bootstrap-server localhost:9092"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      zookeeper:
        image: confluentinc/cp-zookeeper:7.5.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Wait for Kafka to be ready
      run: |
        echo "Waiting for Kafka to be ready..."
        sleep 30

    - name: Run integration tests
      run: ./gradlew :intelligent-mapping-generator:integrationTest || echo "Integration tests not configured yet"
      continue-on-error: true
      env:
        SPRING_KAFKA_BOOTSTRAP_SERVERS: localhost:9092
        GRADLE_OPTS: "-Dorg.gradle.daemon=false"

    - name: Upload integration test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: intelligent-mapping-generator/build/test-results/integrationTest/
        retention-days: 7
      continue-on-error: true

  notify:
    runs-on: ubuntu-latest
    name: Notify Build Status
    needs: [build-and-test, code-quality, validation-test, docker-build]
    if: always()

    steps:
    - name: Check build status
      run: |
        echo "Build Status Summary:"
        echo "Build and Test: ${{ needs.build-and-test.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Validation Test: ${{ needs.validation-test.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        
        if [ "${{ needs.build-and-test.result }}" == "failure" ]; then
          echo "❌ Build and test failed"
          exit 1
        fi
        
        if [ "${{ needs.build-and-test.result }}" == "success" ]; then
          echo "✅ All critical checks passed"
        fi
