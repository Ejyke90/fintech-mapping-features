name: Deploy Documentation to GitHub Pages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: docs/package-lock.json
      
      - name: Grant Execute Permission to Gradlew
        run: chmod +x ./gradlew
      
      - name: Build Spring Boot Microservices
        run: ./gradlew :intelligent-mapping-generator:build -x test
      
      - name: Start Mapping Generator Service
        run: |
          ./gradlew :intelligent-mapping-generator:bootRun > mapping-generator.log 2>&1 &
          echo $! > mapping-generator.pid
      
      - name: Wait for Service to Start
        run: |
          echo "Waiting for intelligent-mapping-generator to start..."
          sleep 60
          
          echo "Checking Mapping Generator..."
          for i in {1..10}; do
            if curl -f http://localhost:8081/v3/api-docs; then
              echo "Service is up!"
              break
            fi
            echo "Attempt $i: Service not ready yet, waiting 10s..."
            sleep 10
          done
          
          # Final check
          curl -f http://localhost:8081/v3/api-docs || (echo "Service failed to start. Logs:" && cat mapping-generator.log && exit 1)
      
      - name: Create OpenAPI Specs Directory
        run: mkdir -p openapi-specs
      
      - name: Download OpenAPI Specifications
        run: |
          echo "Downloading Mapping Generator OpenAPI Spec..."
          curl -o openapi-specs/mapping-generator-openapi.json http://localhost:8081/v3/api-docs
          
          echo "Mapping Generator OpenAPI Spec:"
          cat openapi-specs/mapping-generator-openapi.json
          
          # Create placeholder for xml-sanitizer (future implementation)
          echo '{"openapi":"3.0.1","info":{"title":"XML Sanitizer API (Coming Soon)","version":"0.0.1"}}' > openapi-specs/xml-sanitizer-openapi.json
      
      - name: Stop Spring Boot Service
        run: |
          if [ -f mapping-generator.pid ]; then
            kill $(cat mapping-generator.pid) || true
          fi
      
      - name: Install Docusaurus Dependencies
        run: cd docs && npm ci
      
      - name: Generate API Documentation from OpenAPI Specs
        run: cd docs && npm run gen-api-docs || echo "Skipping API docs generation"
      
      - name: Build Docusaurus Site
        run: cd docs && npm run build
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
      
      - name: Upload Build Artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/build
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/deploy-pages@v4
