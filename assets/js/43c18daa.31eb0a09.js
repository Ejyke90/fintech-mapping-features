"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[2230],{25859:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"welcome","metadata":{"permalink":"/fintech-mapping-features/blog/welcome","editUrl":"https://github.com/Ejyke90/fintech-mapping-features/tree/main/docs/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome to Fintech Mapping Features Documentation","description":"Welcome to the Fintech Mapping Features documentation site! This project is a multi-module Spring Boot monorepo designed for fintech data transformation and ISO 20022 message processing.","date":"2021-08-26T00:00:00.000Z","tags":[{"inline":true,"label":"fintech","permalink":"/fintech-mapping-features/blog/tags/fintech"},{"inline":true,"label":"spring-boot","permalink":"/fintech-mapping-features/blog/tags/spring-boot"},{"inline":true,"label":"microservices","permalink":"/fintech-mapping-features/blog/tags/microservices"},{"inline":true,"label":"iso20022","permalink":"/fintech-mapping-features/blog/tags/iso-20022"}],"readingTime":0.95,"hasTruncateMarker":true,"authors":[{"name":"Ejike Udeze","title":"Cloud Engineer and AI Enthusiast","url":"https://github.com/Ejyke90","page":{"permalink":"/fintech-mapping-features/blog/authors/ejike"},"socials":{"github":"https://github.com/Ejyke90","linkedin":"https://www.linkedin.com/in/ejike-udeze/"},"imageURL":"/fintech-mapping-features/blog/2021-08-26-welcome/Stage_Ejike_U.jpg","key":"ejike"}],"frontMatter":{"slug":"welcome","title":"Welcome to Fintech Mapping Features Documentation","authors":["ejike"],"tags":["fintech","spring-boot","microservices","iso20022"]},"unlisted":false,"nextItem":{"title":"Building ISO 20022-Compliant Microservices with Spring Boot","permalink":"/fintech-mapping-features/blog/iso20022-microservices"}},"content":"Welcome to the **Fintech Mapping Features** documentation site! This project is a multi-module Spring Boot monorepo designed for fintech data transformation and ISO 20022 message processing.\\n\\n![Ejike Udeze](./Stage_Ejike_U.jpg)\\n\\nAs a Cloud Engineer and AI Enthusiast, I\'m excited to share this comprehensive documentation covering our microservices architecture, API references, and deployment guides.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What\'s Inside\\n\\nThis documentation covers two powerful microservices:\\n\\n### \ud83e\uddf9 XML Sanitizer (Port 8080)\\nEnsures XML compliance by removing invalid characters and validating XML payloads - essential for financial message processing.\\n\\n### \ud83d\uddfa\ufe0f Intelligent Mapping Generator (Port 8081)\\nGenerates intelligent mappings for fintech data transformations with full ISO 20022 support and ActiveMQ Artemis integration.\\n\\n## Key Features\\n\\n- \u2705 **Automated API Documentation** - Swagger UI integration\\n- \u2705 **ISO 20022 Standards** - PAIN and PACS message support\\n- \u2705 **Modern Stack** - Java 21, Spring Boot 3.2.1, Gradle\\n- \u2705 **Message Broker** - Embedded ActiveMQ Artemis\\n- \u2705 **Comprehensive Docs** - Architecture, guides, and API references\\n\\n## Get Started\\n\\nCheck out our [Getting Started Guide](/docs/guides/getting-started) to set up your local environment and start building with our APIs.\\n\\n## Continuous Updates\\n\\nThis documentation is automatically generated and deployed via GitHub Actions, ensuring you always have access to the latest API specifications and guides.\\n\\nHappy building! \ud83d\ude80"},{"id":"iso20022-microservices","metadata":{"permalink":"/fintech-mapping-features/blog/iso20022-microservices","editUrl":"https://github.com/Ejyke90/fintech-mapping-features/tree/main/docs/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Building ISO 20022-Compliant Microservices with Spring Boot","description":"Deep dive into how we built ISO 20022-compliant microservices for financial message processing using Spring Boot 3.2.1 and Java 21.","date":"2019-05-29T00:00:00.000Z","tags":[{"inline":true,"label":"iso20022","permalink":"/fintech-mapping-features/blog/tags/iso-20022"},{"inline":true,"label":"fintech","permalink":"/fintech-mapping-features/blog/tags/fintech"},{"inline":true,"label":"spring-boot","permalink":"/fintech-mapping-features/blog/tags/spring-boot"},{"inline":true,"label":"microservices","permalink":"/fintech-mapping-features/blog/tags/microservices"},{"inline":true,"label":"payments","permalink":"/fintech-mapping-features/blog/tags/payments"}],"readingTime":2.15,"hasTruncateMarker":true,"authors":[{"name":"Ejike Udeze","title":"Cloud Engineer and AI Enthusiast","url":"https://github.com/Ejyke90","page":{"permalink":"/fintech-mapping-features/blog/authors/ejike"},"socials":{"github":"https://github.com/Ejyke90","linkedin":"https://www.linkedin.com/in/ejike-udeze/"},"imageURL":"/fintech-mapping-features/blog/2021-08-26-welcome/Stage_Ejike_U.jpg","key":"ejike"}],"frontMatter":{"slug":"iso20022-microservices","title":"Building ISO 20022-Compliant Microservices with Spring Boot","authors":["ejike"],"tags":["iso20022","fintech","spring-boot","microservices","payments"]},"unlisted":false,"prevItem":{"title":"Welcome to Fintech Mapping Features Documentation","permalink":"/fintech-mapping-features/blog/welcome"},"nextItem":{"title":"Integrating SpringDoc OpenAPI with Docusaurus","permalink":"/fintech-mapping-features/blog/springdoc-openapi-integration"}},"content":"Deep dive into how we built ISO 20022-compliant microservices for financial message processing using Spring Boot 3.2.1 and Java 21.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Understanding ISO 20022\\n\\nISO 20022 is the international standard for electronic data interchange between financial institutions. It provides a common platform for developing messages using XML and JSON.\\n\\n### Key Message Types We Support\\n\\n**PAIN Messages (Payments Initiation)**\\n- `pain.001.001.09` - Customer Credit Transfer Initiation\\n- `pain.002.001.10` - Payment Status Report\\n\\n**PACS Messages (Payments Clearing and Settlement)**\\n- `pacs.008.001.08` - Financial Institution Credit Transfer\\n- `pacs.002.001.10` - Payment Status Report\\n- `pacs.004.001.09` - Payment Return\\n\\n## Architecture Overview\\n\\nOur monorepo contains two specialized microservices:\\n\\n### 1. XML Sanitizer (Port 8080)\\nEnsures XML compliance before processing financial messages. Critical for handling ISO 20022 XML payloads that may contain invalid characters.\\n\\n### 2. Intelligent Mapping Generator (Port 8081)\\nTransforms between different ISO 20022 message formats. For example, mapping `pain.001.001.09` (customer-initiated payment) to `pacs.008.001.08` (interbank credit transfer).\\n\\n## Technical Implementation\\n\\n### JAXB for XML Processing\\n```java\\n@XmlRootElement(name = \\"Document\\")\\n@XmlAccessorType(XmlAccessType.FIELD)\\npublic class Pain00100109 {\\n    @XmlElement(name = \\"CstmrCdtTrfInitn\\")\\n    private CustomerCreditTransferInitiation creditTransfer;\\n}\\n```\\n\\n### ActiveMQ Artemis Integration\\nWe use embedded ActiveMQ Artemis for asynchronous message processing:\\n\\n```properties\\nspring.artemis.mode=embedded\\nspring.artemis.embedded.enabled=true\\nspring.artemis.embedded.persistent=false\\n```\\n\\n## Benefits of Our Approach\\n\\n\u2705 **Compliance** - Full ISO 20022 standard adherence  \\n\u2705 **Scalability** - Stateless microservices can scale horizontally  \\n\u2705 **Modularity** - Independent deployment of sanitizer and mapper  \\n\u2705 **Performance** - Java 21 with virtual threads support  \\n\u2705 **Developer Experience** - Comprehensive API documentation\\n\\n## What\'s Next?\\n\\nWe\'re planning to add support for:\\n- ISO 20022 CAMT messages (Cash Management)\\n- Real-time validation against XSD schemas\\n- Message routing based on BIC codes\\n- Enhanced error handling and retry logic\\n\\nStay tuned for more updates!\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"springdoc-openapi-integration","metadata":{"permalink":"/fintech-mapping-features/blog/springdoc-openapi-integration","editUrl":"https://github.com/Ejyke90/fintech-mapping-features/tree/main/docs/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"Integrating SpringDoc OpenAPI with Docusaurus","description":"Learn how we integrated SpringDoc OpenAPI with Docusaurus to create automated, interactive API documentation for our fintech microservices.","date":"2019-05-28T00:00:00.000Z","tags":[{"inline":true,"label":"spring-boot","permalink":"/fintech-mapping-features/blog/tags/spring-boot"},{"inline":true,"label":"openapi","permalink":"/fintech-mapping-features/blog/tags/openapi"},{"inline":true,"label":"documentation","permalink":"/fintech-mapping-features/blog/tags/documentation"},{"inline":true,"label":"swagger","permalink":"/fintech-mapping-features/blog/tags/swagger"}],"readingTime":0.73,"hasTruncateMarker":true,"authors":[{"name":"Ejike Udeze","title":"Cloud Engineer and AI Enthusiast","url":"https://github.com/Ejyke90","page":{"permalink":"/fintech-mapping-features/blog/authors/ejike"},"socials":{"github":"https://github.com/Ejyke90","linkedin":"https://www.linkedin.com/in/ejike-udeze/"},"imageURL":"/fintech-mapping-features/blog/2021-08-26-welcome/Stage_Ejike_U.jpg","key":"ejike"}],"frontMatter":{"slug":"springdoc-openapi-integration","title":"Integrating SpringDoc OpenAPI with Docusaurus","authors":["ejike"],"tags":["spring-boot","openapi","documentation","swagger"]},"unlisted":false,"prevItem":{"title":"Building ISO 20022-Compliant Microservices with Spring Boot","permalink":"/fintech-mapping-features/blog/iso20022-microservices"}},"content":"Learn how we integrated SpringDoc OpenAPI with Docusaurus to create automated, interactive API documentation for our fintech microservices.\\n\\n\x3c!-- truncate --\x3e\\n\\n## The Challenge\\n\\nManaging API documentation for multiple microservices can be challenging. We needed a solution that would:\\n\\n- Automatically generate API docs from our Spring Boot services\\n- Provide interactive API testing via Swagger UI\\n- Integrate seamlessly with our documentation site\\n- Stay in sync with code changes\\n\\n## The Solution\\n\\nWe implemented SpringDoc OpenAPI for both microservices:\\n\\n```gradle\\nimplementation \'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0\'\\n```\\n\\nThis automatically generates OpenAPI 3.0 specifications at `/v3/api-docs` and provides Swagger UI at `/swagger-ui.html`.\\n\\n## Benefits\\n\\n\u2705 **Automatic Updates** - Documentation stays in sync with code  \\n\u2705 **Interactive Testing** - Try APIs directly from the browser  \\n\u2705 **Developer Experience** - Easy to explore and understand APIs  \\n\u2705 **CI/CD Integration** - Deployed automatically with GitHub Actions\\n\\nCheck out our [API Documentation](/docs/xml-sanitizer/overview) to see it in action!"}]}}')}}]);