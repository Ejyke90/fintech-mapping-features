"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[9936],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>t});var r=s(96540);const a={},l=r.createContext(a);function i(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(l.Provider,{value:n},e.children)}},91429:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"csv-parser/api-reference","title":"API Reference","description":"Complete API reference for the CSV Parser microservice.","source":"@site/docs/csv-parser/api-reference.md","sourceDirName":"csv-parser","slug":"/csv-parser/api-reference","permalink":"/fintech-mapping-features/intelligentmappingpoc/docs/csv-parser/api-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/Ejyke90/fintech-mapping-features/tree/main/docs/docs/csv-parser/api-reference.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2}}');var a=s(74848),l=s(28453);const i={sidebar_position:2},t="API Reference",c={},o=[{value:"Base URL",id:"base-url",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"Health Check",id:"health-check",level:3},{value:"GET /health",id:"get-health",level:4},{value:"Parse CSV",id:"parse-csv",level:3},{value:"POST /api/csv/parse",id:"post-apicsvparse",level:4},{value:"Validate CSV",id:"validate-csv",level:3},{value:"POST /api/csv/validate",id:"post-apicsvvalidate",level:4},{value:"Get Schema",id:"get-schema",level:3},{value:"POST /api/csv/schema",id:"post-apicsvschema",level:4},{value:"Transform CSV",id:"transform-csv",level:3},{value:"POST /api/csv/transform",id:"post-apicsvtransform",level:4},{value:"Error Responses",id:"error-responses",level:2},{value:"400 Bad Request",id:"400-bad-request",level:3},{value:"413 Payload Too Large",id:"413-payload-too-large",level:3},{value:"500 Internal Server Error",id:"500-internal-server-error",level:3},{value:"Python Client Example",id:"python-client-example",level:2},{value:"JavaScript/TypeScript Client Example",id:"javascripttypescript-client-example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,a.jsx)(n.p,{children:"Complete API reference for the CSV Parser microservice."}),"\n",(0,a.jsx)(n.h2,{id:"base-url",children:"Base URL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"http://localhost:8000\n"})}),"\n",(0,a.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,a.jsx)(n.h3,{id:"health-check",children:"Health Check"}),"\n",(0,a.jsx)(n.h4,{id:"get-health",children:"GET /health"}),"\n",(0,a.jsx)(n.p,{children:"Check if the service is running."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "status": "healthy"\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"parse-csv",children:"Parse CSV"}),"\n",(0,a.jsx)(n.h4,{id:"post-apicsvparse",children:"POST /api/csv/parse"}),"\n",(0,a.jsx)(n.p,{children:"Parse a CSV file and return its contents as JSON."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"file"})," (required): CSV file to parse"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"auto_detect"})," (optional, default: true): Auto-detect encoding and delimiter"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"encoding"})," (optional): Character encoding (e.g., 'utf-8', 'iso-8859-1')"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"delimiter"})," (optional): CSV delimiter (e.g., ',', ';', '\\t')"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"chunk_size"})," (optional): Process file in chunks for large files"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Request Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -X POST "http://localhost:8000/api/csv/parse?auto_detect=true" \\\n  -H "accept: application/json" \\\n  -H "Content-Type: multipart/form-data" \\\n  -F "file=@data.csv"\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "message": "CSV file parsed successfully",\n  "row_count": 100,\n  "column_count": 5,\n  "columns": ["name", "age", "email", "salary", "department"],\n  "data": [\n    {\n      "name": "John Doe",\n      "age": 30,\n      "email": "john@example.com",\n      "salary": 50000,\n      "department": "Engineering"\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"validate-csv",children:"Validate CSV"}),"\n",(0,a.jsx)(n.h4,{id:"post-apicsvvalidate",children:"POST /api/csv/validate"}),"\n",(0,a.jsx)(n.p,{children:"Validate CSV structure without returning the full dataset."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"file"})," (required): CSV file to validate"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"auto_detect"})," (optional, default: true): Auto-detect encoding and delimiter"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Request Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -X POST "http://localhost:8000/api/csv/validate" \\\n  -F "file=@data.csv"\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "is_valid": true,\n  "row_count": 100,\n  "column_count": 5,\n  "columns": ["name", "age", "email", "salary", "department"],\n  "missing_values": {\n    "age": 2,\n    "email": 1\n  },\n  "data_types": {\n    "name": "object",\n    "age": "float64",\n    "email": "object",\n    "salary": "int64",\n    "department": "object"\n  },\n  "errors": []\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"get-schema",children:"Get Schema"}),"\n",(0,a.jsx)(n.h4,{id:"post-apicsvschema",children:"POST /api/csv/schema"}),"\n",(0,a.jsx)(n.p,{children:"Extract schema information from CSV file."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"file"})," (required): CSV file to analyze"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"auto_detect"})," (optional, default: true): Auto-detect encoding and delimiter"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Request Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -X POST "http://localhost:8000/api/csv/schema" \\\n  -F "file=@data.csv"\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "row_count": 100,\n  "estimated_size_mb": 0.05,\n  "columns": [\n    {\n      "name": "name",\n      "dtype": "object",\n      "nullable": false,\n      "unique_count": 98,\n      "sample_values": ["John Doe", "Jane Smith", "Bob Johnson"]\n    },\n    {\n      "name": "age",\n      "dtype": "int64",\n      "nullable": true,\n      "unique_count": 45,\n      "sample_values": [30, 25, 35],\n      "stats": {\n        "min": 22,\n        "max": 65,\n        "mean": 38.5\n      }\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"transform-csv",children:"Transform CSV"}),"\n",(0,a.jsx)(n.h4,{id:"post-apicsvtransform",children:"POST /api/csv/transform"}),"\n",(0,a.jsx)(n.p,{children:"Transform and clean CSV data."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"file"})," (required): CSV file to transform"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"auto_detect"})," (optional, default: true): Auto-detect encoding and delimiter"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"remove_empty_rows"})," (optional, default: false): Remove empty rows"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"remove_duplicates"})," (optional, default: false): Remove duplicate rows"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"trim_whitespace"})," (optional, default: true): Trim whitespace from strings"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"lowercase_columns"})," (optional, default: false): Convert column names to lowercase"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Request Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -X POST "http://localhost:8000/api/csv/transform?remove_duplicates=true&trim_whitespace=true" \\\n  -F "file=@data.csv"\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Response:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "message": "CSV transformed successfully",\n  "original_row_count": 100,\n  "cleaned_row_count": 95,\n  "data": [\n    {\n      "name": "John Doe",\n      "age": 30,\n      "email": "john@example.com"\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"error-responses",children:"Error Responses"}),"\n",(0,a.jsx)(n.h3,{id:"400-bad-request",children:"400 Bad Request"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "Invalid file type. Only CSV, TXT, and TSV files are allowed."\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"413-payload-too-large",children:"413 Payload Too Large"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "File too large. Maximum size is 10MB"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"500-internal-server-error",children:"500 Internal Server Error"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "Internal server error"\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"python-client-example",children:"Python Client Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import requests\n\n# Parse CSV\nwith open('data.csv', 'rb') as f:\n    response = requests.post(\n        'http://localhost:8000/api/csv/parse',\n        files={'file': f},\n        params={'auto_detect': True}\n    )\n    \nif response.status_code == 200:\n    result = response.json()\n    print(f\"Parsed {result['row_count']} rows\")\n    print(f\"Columns: {result['columns']}\")\nelse:\n    print(f\"Error: {response.json()['detail']}\")\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"javascripttypescript-client-example",children:"JavaScript/TypeScript Client Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const formData = new FormData();\nformData.append('file', fileInput.files[0]);\n\nconst response = await fetch('http://localhost:8000/api/csv/parse?auto_detect=true', {\n  method: 'POST',\n  body: formData\n});\n\nconst result = await response.json();\nconsole.log(`Parsed ${result.row_count} rows`);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);